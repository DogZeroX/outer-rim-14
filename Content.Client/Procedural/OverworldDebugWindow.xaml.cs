using System.Globalization;
using Content.Shared.Procedural;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.Procedural;

[GenerateTypedNameReferences]
public partial class OverworldDebugWindow : DefaultWindow
{
    public OverworldDebugWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(OverworldDebugEuiState state)
    {
        View.Data = state.ChunkData;
    }
}

public sealed class OverworldDebugControl : Control
{
    private const int SizeFull = 768;

    public DebugChunkData[][]? Data;

    private readonly Font _font;

    public OverworldDebugControl()
    {
        MinSize = (SizeFull, SizeFull);
        _font = new VectorFont(IoCManager.Resolve<IResourceCache>().GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        if (Data is null)
            return;
        var height = PixelSize.Y / Data.Length;

        for (var y = 0; y < Data.Length; y++)
        {
            for (var x = 0; x < Data[y].Length; x++)
            {
                var width = PixelSize.X / Data[y].Length;
                var color = Color.White;
                var bgcolor = Color.Transparent;

                if (Data[y][x].Loaded)
                    bgcolor = Color.BlueViolet;

                handle.DrawRect(UIBox2.FromDimensions(width * x, height * y, width, height), bgcolor);

                if (!Data[y][x].Clipped)
                handle.DrawString(_font, (width * x, height * y),
                    Data[y][x].Density.ToString(CultureInfo.InvariantCulture), color);
            }
        }
    }
}
