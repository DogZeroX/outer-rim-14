using System;
using System.Globalization;
using Content.Shared.Procedural;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.Procedural;

[GenerateTypedNameReferences]
public partial class OverworldDebugWindow : DefaultWindow
{
    public OverworldDebugWindow()
    {
        RobustXamlLoader.Load(this);
        foreach (var lab in Enum.GetNames(typeof(NumericChoice)))
        {
            NumericOption.AddItem(lab, (int)Enum.Parse<NumericChoice>(lab));
        }

        NumericOption.OnItemSelected += args =>
        {
            NumericOption.Select(args.Id);
            View.Numeric = (NumericChoice) args.Id;
        };

        foreach (var lab in Enum.GetNames(typeof(VisualChoice)))
        {
            VisualOption.AddItem(lab, (int)Enum.Parse<VisualChoice>(lab));
        }

        VisualOption.OnItemSelected += args =>
        {
            VisualOption.Select(args.Id);
            View.Visual = (VisualChoice) args.Id;
        };
    }

    public void UpdateState(OverworldDebugEuiState state)
    {
        View.Data = state.ChunkData;
    }
}

public sealed class OverworldDebugControl : Control
{
    private const int SizeFull = 768;

    public DebugChunkData[][]? Data;
    public NumericChoice Numeric = NumericChoice.Density;
    public VisualChoice Visual = VisualChoice.Loaded;

    private readonly Font _font;

    public OverworldDebugControl()
    {
        MinSize = (SizeFull, SizeFull);
        _font = new VectorFont(IoCManager.Resolve<IResourceCache>().GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        if (Data is null)
            return;
        var height = PixelSize.Y / Data.Length;

        for (var y = 0; y < Data.Length; y++)
        {
            for (var x = 0; x < Data[y].Length; x++)
            {
                var width = PixelSize.X / Data[y].Length;
                var color = Color.White;
                var bgcolor = Color.Transparent;

                switch (Visual)
                {
                    case VisualChoice.Loaded:
                        if (Data[y][x].Loaded)
                            bgcolor = Color.BlueViolet;
                        break;
                    case VisualChoice.Radstorms:
                        if (Data[y][x].Radstorming)
                            bgcolor = Color.DarkGreen;
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                handle.DrawRect(UIBox2.FromDimensions(width * x, height * y, width, height), bgcolor);

                if (!Data[y][x].Clipped || Numeric != NumericChoice.Density)
                {
                    var n = Numeric switch
                    {
                        NumericChoice.Density => Data[y][x].Density.ToString(CultureInfo.InvariantCulture),
                        NumericChoice.Radiation => Data[y][x].Radiation.ToString(CultureInfo.InvariantCulture),
                        NumericChoice.Temperature => Data[y][x].Temperature.ToString(CultureInfo.InvariantCulture),
                        NumericChoice.Wrecks => Data[y][x].Wrecks.ToString(CultureInfo.InvariantCulture),
                        NumericChoice.Biome => Data[y][x].BiomeSymbol.ToString(),
                        _ => throw new ArgumentOutOfRangeException()
                    };
                    if (n != "0")
                        handle.DrawString(_font, (width * x, height * y), n, color);
                }
            }
        }
    }
}

public enum NumericChoice
{
    Density = 0,
    Radiation,
    Temperature,
    Wrecks,
    Biome,
}

public enum VisualChoice
{
    Loaded = 0,
    Radstorms,
}
